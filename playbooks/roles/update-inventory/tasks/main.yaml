---
# tasks file for download the other required playbooks

# - name: Clean up work directory
#   file: 
#     path: "{{ workdir }}/"
#     state: absent

- name: install jq
  yum:
    name: jq
    state: latest

- name: Set the default value for enable_local_registry  
  set_fact: 
    enable_local_registry: false

- name: Set local registry variables
  when: setup_registry.deploy
  set_fact:
    enable_local_registry: true
    release_image_override: "registry.{{ dns.clusterid }}.{{ dns.domain | lower  }}:5000/{{ setup_registry.local_repo }}:{{ setup_registry.release_tag }}"

- name: Find DHCP pool block
  shell: grep 'pool {' /etc/dhcp/dhcpd.conf
  ignore_errors: yes
  register: dhcp_pool

- name: Update DHCP server config
  when: dhcp_pool.rc == 0
  block:
  - name: Remove pool, range and deny statements
    shell: |
      sed -i.bak '/pool {/d' /etc/dhcp/dhcpd.conf
      sed -i '/range /d' /etc/dhcp/dhcpd.conf
      sed -i '$d' /etc/dhcp/dhcpd.conf
      sed -i 's/deny unknown-clients/#deny unknown-clients/' /etc/dhcp/dhcpd.conf
      sed -i 's/authoritative;/#authoritative;/' /etc/dhcp/dhcpd.conf

  - name: restart dhcpd
    service:
      name: dhcpd
      state: restarted
      enabled: yes

- name: Create the inventory for ocp4-playbooks
  template:
    src: templates/inventory.j2
    dest: "{{ playbook_dir }}/ocp4-playbooks/inventory"

- name: Create the install_vars.yaml for ocp4-playbooks
  template:
    src: templates/install_vars.yaml.j2
    dest: "{{ playbook_dir }}/ocp4-playbooks/install_vars.yaml"
    
# Add the hosts to inventory

- name: Add the hosts to inventory with hostname
  when: ssh_gen_key
  block:
  - name: Add bastion to inventory
    add_host:
      hostname: '{{ helper.name }}'
      ansible_connection: local
      groups: bastion

  - name: Add bootstrap to inventory
    add_host:
      hostname: '{{ bootstrap.name }}'
      ansible_connection: ssh 
      ansible_user: core
      groups: bootstrap

  - name: Add masters to inventory
    add_host:
      hostname: '{{ item.name }}'
      ansible_connection: ssh 
      ansible_user: core
      groups: masters
    with_items: "{{ masters }}"
  
  - name: Check if there is workers
    when: (workers is defined) and (workers|length > 0)
    block:
    - name: Add workers to inventory
      add_host:
        hostname: '{{ item.name }}'
        ansible_connection: ssh 
        ansible_user: core
        groups: workers
      with_items: "{{ workers }}"

- name: Add the hosts to inventory with host IP
  when: not ssh_gen_key
  block:
  - name: Add bastion to inventory
    add_host:
      hostname: '{{ helper.ipaddr }}'
      ansible_connection: local
      groups: bastion

  - name: Add bootstrap to inventory
    add_host:
      hostname: '{{ bootstrap.ipaddr }}'
      ansible_connection: ssh 
      ansible_user: core
      groups: bootstrap

  - name: Add masters to inventory
    add_host:
      hostname: '{{ item.ipaddr }}'
      ansible_connection: ssh 
      ansible_user: core
      groups: masters
    with_items: "{{ masters }}"

  - name: Check if there is workers
    when: (workers is defined) and (workers|length > 0)
    block:
    - name: Add workers to inventory
      add_host:
        hostname: '{{ item.name }}'
        ansible_connection: ssh 
        ansible_user: core
        groups: workers
      with_items: "{{ workers }}"

- name: Copy first-boot-ppc64le.ign to /www/html/ignition
  template:
    src: templates/first-boot-ppc64le.ign.j2
    dest: "/var/www/html/ignition/first-boot-ppc64le.ign"

- name: Update grub.cfg with first-boot ignition
  shell: sed -i 's/coreos.inst=yes coreos/coreos.inst=yes ignition.platform.id=metal ignition.firstboot ignition.config.url=http:\/\/{{ helper.ipaddr }}:8080\/ignition\/first-boot-ppc64le.ign coreos/g' /var/lib/tftpboot/boot/grub2/grub.cfg

# - name: Copy machineconfig files generated from ocp4-helpernode to ocp4-playbooks
#   copy:
#     src: "{{ playbook_dir }}/ocp4-helpernode/machineconfig"
#     dest: "/machineconfig"
#     remote_src: yes
#   with_items:
#       - "*-chrony-configuration.yaml"
#   when: chronyconfig.enabled

- name: create /etc/hosts entry
  copy:
    dest: "{{ playbook_dir }}/../etc.hosts.entry"
    content: >
      {{ helper.ipaddr }} 
      helper.{{ dns.clusterid }}.{{ dns.domain }} 
      api.{{ dns.clusterid }}.{{ dns.domain }} 
      console-openshift-console.apps.{{ dns.clusterid }}.{{ dns.domain }} 
      oauth-openshift.apps.{{ dns.clusterid }}.{{ dns.domain }} 
      integrated-oauth-server-openshift-authentication.apps.{{ dns.clusterid }}.{{ dns.domain }} 
      prometheus-k8s-openshift-monitoring.apps.{{ dns.clusterid }}.{{ dns.domain }} 
      thanos-querier-openshift-monitoring.apps.{{ dns.clusterid }}.{{ dns.domain }} 
      alertmanager-main-openshift-monitoring.apps.{{ dns.clusterid }}.{{ dns.domain }} 
      grafana-openshift-monitoring.apps.{{ dns.clusterid }}.{{ dns.domain }} 
      example.apps.{{ dns.clusterid }}.{{ dns.domain }}
